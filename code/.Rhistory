# Keep only urgent/emergency hospital admissions
admission_data <- admission_data[adm_type %in% c(1, 2)]
# Convert admission date variable to date format
admission_data[ , adate := dmy(adate)]
# Make sure date range is correct
admission_data <- admission_data[adate <= make_date(year = 2014, month = 12, day = 31) &
adate >= make_date(year = 2000, month = 1, day = 1)]
# Append previous leftover admissions from future years
admission_data <- rbind(admission_data, leftover_admissions)
# Collect any admission dates in previous years
leftover_admissions <- admission_data[year(adate) < year_]
year_
admission_data <- admission_data[year(adate) == year_]
# Merge in ccs codes
admission_data <- merge(admission_data, ccs_icd9, by.x = "diag1",
by.y = "icd9", all.x = T)
# Reverse zip codes
admission_data[ , zip := sapply(zipcode_r),
function(z) reverse_string(int_to_zip_str(z))]
admission_data[ , zip := sapply(zipcode_r, function(z) reverse_string(int_to_zip_str(z))]
admission_data[ , zip := sapply(zipcode_r, function(z) reverse_string(int_to_zip_str(z)))]
head(admission_data)
admission_data[ , zipcode_r := NULL]
# Set data.table keys
setkey(admission_data, zip, adate)
# Write to file
write_fst(admission_data, paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"))
rm(list=ls())
# Code to get admission counts by person, by year for medicare data
# Make sure working directory is set to moretrees2/code
setwd("/nfs/home/E/ethomas/shared_space/ci3_analysis/moretrees2/code/")
library(NSAPHutils)
set_threads()
library(data.table)
library(fst)
library(icd)
library(magrittr)
require(lubridate)
# Get data.frame showing mapping from ICD9 to multilevel CCS
ccs_icd9 <- data.frame(icd9 = unlist(icd9_map_multi_ccs[[1]]), stringsAsFactors = F)
for (i in 1:4) {
ccs_list <- icd9_map_multi_ccs[[i]]
ccs_df <- data.frame(icd9 = unlist(ccs_list),
stringsAsFactors = F)
ccs_df$ccs <- ccs_list %>%
names %>% # names of the list entries are the CCS codes
sapply(FUN = function(nm) rep(nm, length(ccs_list[[nm]]))) %>%
unlist
names(ccs_df)[2] <- paste0("ccs_l", i)
ccs_icd9 <- merge(ccs_icd9, ccs_df, by = "icd9", all.x = T, all.y = F)
}
# Keep only diseases of the circulatory system
ccs_icd9 <- subset(ccs_icd9, ccs_l1 == "7")
admissions <- "../data/admissions"
admissions_columns <- c("QID", "DIAG1", "ADATE", "ADM_TYPE", "zipcode_R")
leftover_admissions <- NULL
for (year_ in 2015:2000) {
# need to go backwards (2015 to 2000) as some admission dates for previous years are
# in future years' datasets
# excluding 2016 as no ICD9 codes were in use by 2016
# will only save data from 2000 to 2014 (years ICD9 was used 100% of time)
# Read in data
admission_data <- read_data(admissions, years = year_, columns = admissions_columns)
names(admission_data) <- tolower(names(admission_data))
# Keep only relevant diagnoses
admission_data <- admission_data[diag1 %in% ccs_icd9$icd9]
# Keep only urgent/emergency hospital admissions
admission_data <- admission_data[adm_type %in% c(1, 2)]
# Convert admission date variable to date format
admission_data[ , adate := dmy(adate)]
# Make sure date range is correct
admission_data <- admission_data[adate <= make_date(year = 2014, month = 12, day = 31) &
adate >= make_date(year = 2000, month = 1, day = 1)]
# Append previous leftover admissions from future years
admission_data <- rbind(admission_data, leftover_admissions)
# Collect any admission dates in previous years
leftover_admissions <- admission_data[year(adate) < year_]
if (year_ %in% 2000:2014) {
# Save only current year's admissions
admission_data <- admission_data[year(adate) == year_]
# Merge in ccs codes
admission_data <- merge(admission_data, ccs_icd9, by.x = "diag1",
by.y = "icd9", all.x = T)
# Reverse zip codes
admission_data[ , zip := sapply(zipcode_r, function(z) reverse_string(int_to_zip_str(z)))]
admission_data[ , zipcode_r := NULL]
# Set data.table keys
setkey(admission_data, zip, adate)
# Write to file
write_fst(admission_data, paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"))
}
# Remove dataset
rm(admission_data)
}
ls)
ls()
dim(admissions)
class(admissions)
dim(leftover_admissions)
dat <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"))
dim(dat)
names(dat)
table(dat$adm_type)
head(dat)
rm(list=ls())
require(readr)
require(fst)
require(magrittr)
require(data.table)
require(lubridate)
setwd("/nfs/home/E/ethomas/shared_space/ci3_analysis/moretrees2/code/")
# ------------------------------------------------------ PM2.5 ------------------------------------------------
pm <- fread("../data/daily_pm/all_days_PM.csv", data.table = T,
key = c("ZIP", "date"))
# re-format date variable
pm[ , date := ymd(date)]
# Keep only relevant years
pm <- pm[date >= make_date(year = 2000, month = 1, day = 1) &
date <= make_date(year = 2014, month = 12, day = 31)]
for (year_ in 2000:2014) {
# subset to particular year
pm_year <- pm[date <= make_date(year = year_, month = 12, day = 31) &
date >= make_date(year = year_, month = 1, day = 1) - 2] # need to include two days due to lag
# sort by zip/date
pm_year <- pm_year[order(ZIP, date)]
# compute lags 1, 2 for PM2.5
pm_year[ , c("pm25_lag1", "pm25_lag2") := shift(pm25, n = 1:2, type = "lag"),
by = ZIP]
# exclude extra lag days
pm_year <- pm_year[date >= make_date(year = year_, month = 1, day = 1)]
# write to file
write_fst(pm_year, path = paste0("../data/enviro/pm_", year_, ".fst"))
# remove subsetted data.table for memory purposes
rm(pm_year)
print(year_)
}
dat <- read_fst(paste0("../data/enviro/pm_", year_, ".fst"))
dim(dat)
names(dat)
class(dat$ZIP)
head(dat)
object_size(dat$ZIP)
require(obstr)
require(lobstr)
obj_size(dat$ZIP)
obj_size(int_to_str(dat$ZIP))
obj_size(zip_int_to_str(dat$ZIP))
require(NSAPHutils)
obj_size(int_to_zip_str(dat$ZIP))
rm(list=ls())
# Code to get admission counts by person, by year for medicare data
# Make sure working directory is set to moretrees2/code
setwd("/nfs/home/E/ethomas/shared_space/ci3_analysis/moretrees2/code/")
library(NSAPHutils)
set_threads()
library(data.table)
library(fst)
library(icd)
library(magrittr)
require(lubridate)
# Get data.frame showing mapping from ICD9 to multilevel CCS
ccs_icd9 <- data.frame(icd9 = unlist(icd9_map_multi_ccs[[1]]), stringsAsFactors = F)
for (i in 1:4) {
ccs_list <- icd9_map_multi_ccs[[i]]
ccs_df <- data.frame(icd9 = unlist(ccs_list),
stringsAsFactors = F)
ccs_df$ccs <- ccs_list %>%
names %>% # names of the list entries are the CCS codes
sapply(FUN = function(nm) rep(nm, length(ccs_list[[nm]]))) %>%
unlist
names(ccs_df)[2] <- paste0("ccs_l", i)
ccs_icd9 <- merge(ccs_icd9, ccs_df, by = "icd9", all.x = T, all.y = F)
}
# Keep only diseases of the circulatory system
ccs_icd9 <- subset(ccs_icd9, ccs_l1 == "7")
admissions <- "../data/admissions"
admissions_columns <- c("QID", "DIAG1", "ADATE", "ADM_TYPE", "zipcode_R")
leftover_admissions <- NULL
year_ <- 2014
admission_data <- read_data(admissions, years = year_, columns = admissions_columns)
names(admission_data) <- tolower(names(admission_data))
# Keep only relevant diagnoses
admission_data <- admission_data[diag1 %in% ccs_icd9$icd9]
# Keep only urgent/emergency hospital admissions
admission_data <- admission_data[adm_type %in% c(1, 2)]
# Convert admission date variable to date format
admission_data[ , adate := dmy(adate)]
# Make sure date range is correct
admission_data <- admission_data[adate <= make_date(year = 2014, month = 12, day = 31) &
adate >= make_date(year = 2000, month = 1, day = 1)]
# Append previous leftover admissions from future years
admission_data <- rbind(admission_data, leftover_admissions)
# Collect any admission dates in previous years
leftover_admissions <- admission_data[year(adate) < year_]
admission_data <- admission_data[year(adate) == year_]
# Merge in ccs codes
admission_data <- merge(admission_data, ccs_icd9, by.x = "diag1",
by.y = "icd9", all.x = T)
admission_data[ , zip := sapply(zipcode_r, function(z) int_to_zip_str(z) %>%
reverse_string %>%
as.integer)]
warnings()
head(admission_data)
head(admission_data[is.na(zip)])
rm(list=ls())
year_ <- 2000
admission_data <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"))
admission_data[ , zip := as.integer(zip)]
class(admission_data)
?read_fst
admission_data <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
, as.data.table =  T)
admission_data[ , zip := as.integer(zip)]
head(admission_data)
head(admission_data[is.na(zip)])
admission_data <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
, as.data.table =  T)
head(admission_data)
year_ <- 2014
admission_data <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
, as.data.table =  T)
head(admission_data)
sum(is.na(admission_data$zip))
admission_data[ , zip := as.integer(zip)]
admission_data <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
, as.data.table =  T)
sum(admission_data$zip == "")
sum(admission_data$zip == " ")
admission_data[ , zip2 := as.integer(zip)]
head(admission_data[is.na(zip2)])
for (year_ in 2000:2014) {
admission_data <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
, as.data.table =  T)
admission_data[ , zip2 := as.integer(zip)]
write_fst(admission_data, paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"))
}
rm(list = ls())
require(readr)
require(fst)
require(magrittr)
require(data.table)
require(lubridate)
setwd("/nfs/home/E/ethomas/shared_space/ci3_analysis/moretrees2/code/")
# ------------------------------------------------------ PM2.5 ------------------------------------------------
pm <- fread("../data/daily_pm/all_days_PM.csv", data.table = T,
key = c("ZIP", "date"))
# re-format date variable
pm[ , date := ymd(date)]
# Keep only relevant years
pm <- pm[date >= make_date(year = 2000, month = 1, day = 1) &
date <= make_date(year = 2014, month = 12, day = 31)]
dim(pm)
min(pm$date)
max(pm$date)
for (year_ in 2000:2014) {
# subset to particular year
pm_year <- pm[date <= make_date(year = year_, month = 12, day = 31) &
date >= make_date(year = year_, month = 1, day = 1) - 2] # need to include two days due to lag
# sort by zip/date
pm_year <- pm_year[order(ZIP, date)]
# compute lags 1, 2 for PM2.5
pm_year[ , c("pm25_lag1", "pm25_lag2") := shift(pm25, n = 1:2, type = "lag"),
by = ZIP]
# exclude extra lag days
pm_year <- pm_year[date >= make_date(year = year_, month = 1, day = 1)]
# write to file
write_fst(pm_year, path = paste0("../data/enviro/pm_", year_, ".fst"))
# remove subsetted data.table for memory purposes
rm(pm_year)
print(year_)
}
rm(pm)
ls()
# Temperature
temp <- fread("../data/temperature/temperature_daily_zipcode_combined.csv", data.table = T,
key = c("ZIP", "date"))
temp[ , c("pr", "year") := NULL]
temp[ , date := ymd(date)]
temp <- temp[date >= make_date(year = 2000, month = 1, day = 1) &
date <= make_date(year = 2014, month = 12, day = 31)]
for (year_ in 2000:2014) {
# subset to particular year
temp_year <- temp[date <= make_date(year = year_, month = 12, day = 31) &
date >= make_date(year = year_, month = 1, day = 1) - 3] # need to include three days due to lag
# sort by zip/date
temp_year <- temp_year[order(ZIP, date)]
# compute lags 1, 2, 3 for temp
temp_year[ , c("tmmx_lag1", "tmmx_lag2", "tmmx_lag3") := shift(tmmx, n = 1:3, type = "lag"),
by = ZIP]
# compute lags 1, 2 for humidity
temp_year[ , c("rmax_lag1", "rmax_lag2") := shift(rmax, n = 1:2, type = "lag"),
by = ZIP]
# exclude extra lag days
temp_year <- temp_year[date >= make_date(year = year_, month = 1, day = 1))]
# write to file
write_fst(temp_year, path = paste0("../data/enviro/temp_", year_, ".fst"))
# remove subsetted data.table for memory purposes
rm(temp_year)
}
year_
temp_year <- temp[date <= make_date(year = year_, month = 12, day = 31) &
date >= make_date(year = year_, month = 1, day = 1) - 3] # need to include three days due to lag
# sort by zip/date
temp_year <- temp_year[order(ZIP, date)]
# compute lags 1, 2, 3 for temp
temp_year[ , c("tmmx_lag1", "tmmx_lag2", "tmmx_lag3") := shift(tmmx, n = 1:3, type = "lag"),
by = ZIP]
temp_year[ , c("rmax_lag1", "rmax_lag2") := shift(rmax, n = 1:2, type = "lag"),
by = ZIP]
# exclude extra lag days
temp_year <- temp_year[date >= make_date(year = year_, month = 1, day = 1)]
# write to file
write_fst(temp_year, path = paste0("../data/enviro/temp_", year_, ".fst"))
# remove subsetted data.table for memory purposes
rm(temp_year)
for (year_ in 2000:2014) {
# subset to particular year
temp_year <- temp[date <= make_date(year = year_, month = 12, day = 31) &
date >= make_date(year = year_, month = 1, day = 1) - 3] # need to include three days due to lag
# sort by zip/date
temp_year <- temp_year[order(ZIP, date)]
# compute lags 1, 2, 3 for temp
temp_year[ , c("tmmx_lag1", "tmmx_lag2", "tmmx_lag3") := shift(tmmx, n = 1:3, type = "lag"),
by = ZIP]
# compute lags 1, 2 for humidity
temp_year[ , c("rmax_lag1", "rmax_lag2") := shift(rmax, n = 1:2, type = "lag"),
by = ZIP]
# exclude extra lag days
temp_year <- temp_year[date >= make_date(year = year_, month = 1, day = 1)]
# write to file
write_fst(temp_year, path = paste0("../data/enviro/temp_", year_, ".fst"))
# remove subsetted data.table for memory purposes
rm(temp_year)
}
print(year_)
dat <- read_fst(paste0("../data/enviro/temp_", year_, ".fst"))
dim(dat)
head(dat)
head(dat[100000:1200000,])
head(dat[900000:9200000,])
sum(is.na(dat$tmmx))
sum(is.na(dat$tmmx))/nrow(dat)
rm(temp)
admissions <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
as.data.table = T)
key(admissions)
names(admissions)
year_
head(admissions)
class(admissions$zip)
class(admissions$zip2)
year_ <- 2010
admissions <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
as.data.table = T)
class(admissions$zip2)
class(admissions$zip)
admissions[, zip =- NULL]
admissions[, zip := NULL]
names(admissions)
setnames(admissions, "zip2", "zip")
names(admissions)
year_ <- 2000
for (year_ in 2000:2014) {
# read in admissions
admissions <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
as.data.table = T)
admissions[, zip := NULL]
setnames(admissions, "zip2", "zip")
setkey(admission_data, qid, zip, adate)
write_fst(admission_data, paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"))
print(year_)
}
for (year_ in 2000:2014) {
# read in admissions
admissions <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
as.data.table = T)
admissions[, zip := NULL]
setnames(admissions, "zip2", "zip")
setkey(admissions, qid, zip, adate)
write_fst(admissions, paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"))
print(year_)
}
year_ <- 2000
admissions <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
as.data.table = T)
admissions$cdate <- admissions$adate + sample(c(-7, 7), nrow(admissions), replace = T)
pm25 <- read_fst(paste0("../data/enviro/pm_", year_, ".fst"))
names(pm25)
mean(2,3)
?mean
pm25[ , pm25_lag01 := (pm25_lag1 + pm25_lag2) / 2]
class(pm25)
pm25 <- read_fst(paste0("../data/enviro/pm_", year_, ".fst"), as.data.table = T)
# compute lag01 PM2.5
pm25[ , pm25_lag01 := (pm25_lag1 + pm25_lag2) / 2]
names(pm25)
?read_fst
as.data.table = T, columns = c("ZIP", "date", "pm25", "pm25_lag1"))
pm25 <- read_fst(paste0("../data/enviro/pm_", year_, ".fst"),
as.data.table = T, columns = c("ZIP", "date", "pm25", "pm25_lag1"))
names(pm25)
pm25[ , pm25_lag01 := (pm25 + pm25_lag1) / 2]
pm25[ , c("pm25","pm25_lag1") := NULL]
setnames(pm25, "date", "adate")
?merge.data.table
names(pm25)
?setnames
admissions <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
as.data.table = T)
# select control days (randomly exactly one week before or after)
admissions$cdate <- admissions$adate + sample(c(-7, 7), nrow(admissions), replace = T)
# read in PM2.5 data
pm25 <- read_fst(paste0("../data/enviro/pm_", year_, ".fst"),
as.data.table = T, columns = c("ZIP", "date", "pm25", "pm25_lag1"))
# compute lag01 PM2.5
pm25[ , pm25_lag01 := (pm25 + pm25_lag1) / 2]
pm25[ , c("pm25","pm25_lag1") := NULL]
setnames(pm25, c("date", "ZIP") c("adate", "zip"))
setnames(pm25, c("date", "ZIP"), c("adate", "zip"))
names(pm25)
admissions <- merge(admissions, pm25, by = c("zip", "adate"))
admissions <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
as.data.table = T)
# select control days (randomly exactly one week before or after)
admissions$cdate <- admissions$adate + sample(c(-7, 7), nrow(admissions), replace = T)
# read in PM2.5 data
pm25 <- read_fst(paste0("../data/enviro/pm_", year_, ".fst"),
as.data.table = T, columns = c("ZIP", "date", "pm25", "pm25_lag1"))
# compute lag01 PM2.5
pm25[ , pm25_lag01 := (pm25 + pm25_lag1) / 2]
pm25[ , c("pm25","pm25_lag1") := NULL]
dim(admissions)
admissions <- merge(admissions, pm25, by.x = c("zip", "adate"), by.y = c("ZIP", "date")
all.x = T, all.y = F)
admissions <- merge(admissions, pm25, by.x = c("zip", "adate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
dim(admissions)
head(admissions)
sum(is.na(admissions$pm25_lag01))
dim(admissions)
admissions <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
as.data.table = T)
# select control days (randomly exactly one week before or after)
admissions$cdate <- admissions$adate + sample(c(-7, 7), nrow(admissions), replace = T)
# read in PM2.5 data
pm25 <- read_fst(paste0("../data/enviro/pm_", year_, ".fst"),
as.data.table = T, columns = c("ZIP", "date", "pm25", "pm25_lag1"))
# compute lag01 PM2.5
pm25[ , pm25_lag01_case := (pm25 + pm25_lag1) / 2]
pm25[ , c("pm25","pm25_lag1") := NULL]
# merge lag01 PM2.5 for case and control days
admissions <- merge(admissions, pm25, by.x = c("zip", "adate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
head(admissions)
setnames(pm25[ , "pm25_lag01_case", "pm25_lag01_control"])
setnames(pm2, "pm25_lag01_case", "pm25_lag01_control")
setnames(pm25, "pm25_lag01_case", "pm25_lag01_control")
admissions <- merge(admissions, pm25, by.x = c("zip", "cdate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
head(admissions)
admissions <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
as.data.table = T, columns = ("zip", "adate", "qid", "ccs_l4"))
admissions <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
as.data.table = T, columns = c("zip", "adate", "qid", "ccs_l4"))
# select control days (randomly exactly one week before or after)
admissions$cdate <- admissions$adate + sample(c(-7, 7), nrow(admissions), replace = T)
# read in PM2.5 data
pm25 <- read_fst(paste0("../data/enviro/pm_", year_, ".fst"),
as.data.table = T, columns = c("ZIP", "date", "pm25", "pm25_lag1"))
# compute lag01 PM2.5
pm25[ , pm25_lag01_case := (pm25 + pm25_lag1) / 2]
pm25[ , c("pm25","pm25_lag1") := NULL]
# merge lag01 PM2.5 for case and control days
admissions <- merge(admissions, pm25, by.x = c("zip", "adate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
setnames(pm25, "pm25_lag01_case", "pm25_lag01_control")
admissions <- merge(admissions, pm25, by.x = c("zip", "cdate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
obj_size(admissions)
?obj_size
obj_size(admissions) / 10^6
dim(admissions)
head(admissions)
rm(admissions)
admissions <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
as.data.table = T)
head(admissions)
ccs_icd9 <- data.frame(icd9 = unlist(icd9_map_multi_ccs[[1]]), stringsAsFactors = F)
for (i in 1:4) {
ccs_list <- icd9_map_multi_ccs[[i]]
ccs_df <- data.frame(icd9 = unlist(ccs_list),
stringsAsFactors = F)
ccs_df$ccs <- ccs_list %>%
names %>% # names of the list entries are the CCS codes
sapply(FUN = function(nm) rep(nm, length(ccs_list[[nm]]))) %>%
unlist
names(ccs_df)[2] <- paste0("ccs_l", i)
ccs_icd9 <- merge(ccs_icd9, ccs_df, by = "icd9", all.x = T, all.y = F)
}
head(ccs_icd9)
ccs_icd9 <- subset(ccs_icd9, ccs_l1 == "7")
head(ccs_icd9)
ls()
names(admissions)
admissions <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
as.data.table = T, columns = c("zip", "adate", "qid", "ccs_l4"))
obj_size(admissions)
names(admissions)
admissions[ ,  ccs_l4 := NULL]
obj_size(admissions)
admissions[ ,  qid := NULL]
obj_size(admissions)
