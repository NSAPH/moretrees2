zips <- zips[!is.na(zipcode_r)] # NA zipcodes can be left as NA
zips[ , zip := sapply(zipcode_r, function(z) int_to_zip_str(z) %>%
reverse_string %>%
as.integer)]
# Merge in reversed zip codes
admission_data <- merge(admission_data, zips, by = "zipcode_r", all.x = T, all.y = F)
admission_data[ , zipcode_r := NULL]
# Merge in integer IDs to replace QIDs
admission_data <- merge(admission_data, qids, by = "qid",
all.x = T, all.y = F)
admission_data[ , qid := NULL]
# Set data.table keys
setkey(admission_data, zip, adate)
# Write to file
write_fst(admission_data, paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"))
}
# Remove dataset
rm(admission_data)
print(year_)
}
ls()
rm(list = ls())
library(NSAPHutils)
set_threads()
# Make sure working directory is set to moretrees2/code
setwd("/nfs/home/E/ethomas/shared_space/ci3_analysis/moretrees2/code/")
library(data.table)
library(fst)
library(icd)
library(stringr)
library(readr)
admissions_path <- "../data/admissions_cvd/"
enviro_path <- "../data/temperature/"
merged_path <- "../data/merged_admissions_enviro/"
year_ <- admissions
year_ <- 2000
admissions <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
as.data.table = T, columns = c("zip", "adate", "ccs"))
dim(admissions)
admissions$cdate <- admissions$adate + sample(c(-7, 7), nrow(admissions), replace = T)
# read in PM2.5 data
pm25 <- read_fst(paste0("../data/enviro/pm_", year_, ".fst"),
as.data.table = T, columns = c("ZIP", "date", "pm25", "pm25_lag1"))
# compute lag01 PM2.5
pm25[ , pm25_lag01_case := (pm25 + pm25_lag1) / 2]
pm25[ , c("pm25","pm25_lag1") := NULL]
# merge lag01 PM2.5 for case and control days
admissions <- merge(admissions, pm25, by.x = c("zip", "adate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
setnames(pm25, "pm25_lag01_case", "pm25_lag01_control")
admissions <- merge(admissions, pm25, by.x = c("zip", "cdate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
temp <- read_fst(paste0("../data/enviro/temp_", year_, ".fst"),
as.data.table = T)
head(temp)
temp[ , temp_lag01_case := (temp + temp_lag1) / 2]
temp[ , tmmx_lag01_case := (tmmx + tmmx_lag1) / 2]
temp[ , tmmx_lag23_case :- (tmmx_lag2 + tmmx_lag3) / 2]
temp[ , tmmx_lag23_case := (tmmx_lag2 + tmmx_lag3) / 2]
temp[ , c("tmmx", "tmmx_lag1", "tmmx_lag2", "tmmx_lag3") := NULL]
names(temp)
as.data.table = T, columns = c("ZIP", "date", "tmmx" "tmmx_lag1", "rmax", "rmax_lag1"))
temp <- read_fst(paste0("../data/enviro/temp_", year_, ".fst",
as.data.table = T, columns = c("ZIP", "date", "tmmx" "tmmx_lag1", "rmax", "rmax_lag1"))
temp <- read_fst(paste0("../data/enviro/temp_", year_, ".fst", as.data.table = T,
columns = c("ZIP", "date", "tmmx" "tmmx_lag1", "rmax", "rmax_lag1"))
temp <- read_fst(paste0("../data/enviro/temp_", year_, ".fst"), as.data.table = T,
columns = c("ZIP", "date", "tmmx" "tmmx_lag1", "rmax", "rmax_lag1"))
temp <- read_fst(paste0("../data/enviro/temp_", year_, ".fst"), as.data.table = T,
columns = c("ZIP", "date", "tmmx", "tmmx_lag1", "rmax", "rmax_lag1"))
temp[ , tmmx_lag01_case := (tmmx + tmmx_lag1) / 2]
temp[ , rmax_lag01_case := (rmax + rmax_lag1) / 2]
temp[ , c("tmmx", "tmmx_lag1", "rmax", "rmax_lag1") := NULL]
admissions <- merge(admissions, temp, by.x = c("zip", "adate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
names(admissions)
setnames(pm25, c("tmmx_lag01_case", "rmax_lag01_case"),
c("tmmx_lag01_control", "tmmx_lag01_control")
)
setnames(temp, c("tmmx_lag01_case", "rmax_lag01_case"),
c("tmmx_lag01_control", "tmmx_lag01_control"))
names(temp)
admissions <- merge(admissions, temp, by.x = c("zip", "cdate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
names(temp)
names(admissions)
temp <- read_fst(paste0("../data/enviro/temp_", year_, ".fst"), as.data.table = T,
columns = c("ZIP", "date", "tmmx", "tmmx_lag1", "rmax", "rmax_lag1"))
# compute lag01 temperature & humidity
temp[ , tmmx_lag01_case := (tmmx + tmmx_lag1) / 2]
temp[ , rmax_lag01_case := (rmax + rmax_lag1) / 2]
temp[ , c("tmmx", "tmmx_lag1", "rmax", "rmax_lag1") := NULL]
dim(admissions)
admissions <- merge(admissions, temp, by.x = c("zip", "adate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
dim(admissions)
setnames(temp, c("tmmx_lag01_case", "rmax_lag01_case"),
c("tmmx_lag01_control", "rmax_lag01_control"))
admissions <- merge(admissions, temp, by.x = c("zip", "cdate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
dim(admissions)
names(admissions)
# NOTE: for now I am ignoring the fact that multiple hospitalizations may occur for same individual
admissions <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
as.data.table = T, columns = c("zip", "adate", "ccs"))
# select control days (randomly exactly one week before or after)
# NOTE: could later swap this to "time-stratified" design
admissions$cdate <- admissions$adate + sample(c(-7, 7), nrow(admissions), replace = T)
# read in PM2.5 data
pm25 <- read_fst(paste0("../data/enviro/pm_", year_, ".fst"),
as.data.table = T, columns = c("ZIP", "date", "pm25", "pm25_lag1"))
# compute lag01 PM2.5
pm25[ , pm25_lag01_case := (pm25 + pm25_lag1) / 2]
pm25[ , c("pm25","pm25_lag1") := NULL]
# merge lag01 PM2.5 for case and control days
admissions <- merge(admissions, pm25, by.x = c("zip", "adate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
setnames(pm25, "pm25_lag01_case", "pm25_lag01_control")
admissions <- merge(admissions, pm25, by.x = c("zip", "cdate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
# read in temperature & humidity data
temp <- read_fst(paste0("../data/enviro/temp_", year_, ".fst"), as.data.table = T,
columns = c("ZIP", "date", "tmmx", "tmmx_lag1", "rmax", "rmax_lag1"))
# compute lag01 temperature & humidity
temp[ , tmmx_lag01_case := (tmmx + tmmx_lag1) / 2]
temp[ , rmax_lag01_case := (rmax + rmax_lag1) / 2]
temp[ , c("tmmx", "tmmx_lag1", "rmax", "rmax_lag1") := NULL]
# merge temp & humidity data for case and control days
admissions <- merge(admissions, temp, by.x = c("zip", "adate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
setnames(temp, c("tmmx_lag01_case", "rmax_lag01_case"),
c("tmmx_lag01_control", "rmax_lag01_control"))
admissions <- merge(admissions, temp, by.x = c("zip", "cdate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
names(admissions)
sum(is.na(admissions$pm25_lag01_case))
sum(is.na(admissions$pm25_lag01_control))
rm(list = ls())
require(readr)
require(fst)
require(magrittr)
require(data.table)
require(lubridate)
setwd("/nfs/home/E/ethomas/shared_space/ci3_analysis/moretrees2/code/")
# ------------------------------------------------------ PM2.5 ------------------------------------------------
pm <- fread("../data/daily_pm/all_days_PM.csv", data.table = T,
key = c("ZIP", "date"))
control_dist <- 7 # max number of days between case day and control day
maxlag <- 3 # maximum lag to consider
buffer <- control_dist + maxlag
dim(pm)
pm <- pm[date >= make_date(year = 2000, month = 1, day = 1) - buffer &
date <= make_date(year = 2014, month = 12, day = 31) + buffer]
dim(pm)
buffer
rm(om)
rm(pm)
pm <- fread("../data/daily_pm/all_days_PM.csv", data.table = T,
key = c("ZIP", "date"))
# re-format date variable
pm[ , date := ymd(date)]
control_dist <- 7 # max number of days between case day and control day
maxlag <- 3 # maximum lag to consider
buffer <- control_dist + maxlag
make_date(year = 2000, month = 1, day = 1) - buffer
names(pm)
make_date(year = 2014, month = 12, day = 31) + buffer
sum(pm$date >= make_date(year = 2000, month = 1, day = 1) - buffer)
pm <- pm[date >= make_date(year = 2000, month = 1, day = 1) - buffer &
date <= make_date(year = 2014, month = 12, day = 31) + buffer]
dim(pm)
year_ <- 2000
pm_year <- pm[date >= make_date(year = year_, month = 1, day = 1) - buffer &
date <= make_date(year = year_, month = 12, day = 31) + buffer]
pm_year <- pm_year[order(ZIP, date)]
# compute lags 1, 2 for PM2.5
pm_year[ , c("pm25_lag1", "pm25_lag2") := shift(pm25, n = 1:2, type = "lag"),
by = ZIP]
# exclude extra lag days
pm_year <- pm_year[date >= make_date(year = year_, month = 1, day = 1) - control_dist &
date <= make_date(year = year_, month = 12, day = 31) + control_dist]
min(pm_year$date)
max(pm_year$date)
for (year_ in 2000:2014) {
# subset to particular year
# (need to keep buffer of one week + 3 days on either end due to lag and control days)
pm_year <- pm[date >= make_date(year = year_, month = 1, day = 1) - buffer &
date <= make_date(year = year_, month = 12, day = 31) + buffer]
# sort by zip/date
pm_year <- pm_year[order(ZIP, date)]
# compute lags 1, 2 for PM2.5
pm_year[ , c("pm25_lag1", "pm25_lag2") := shift(pm25, n = 1:2, type = "lag"),
by = ZIP]
# exclude extra lag days
pm_year <- pm_year[date >= make_date(year = year_, month = 1, day = 1) - control_dist &
date <= make_date(year = year_, month = 12, day = 31) + control_dist]
# write to file
write_fst(pm_year, path = paste0("../data/enviro/pm_", year_, ".fst"))
# remove subsetted data.table for memory purposes
rm(pm_year)
print(year_)
}
rm(pm)
# ----------------------------------------------- Temperature ------------------------------------------------
# Temperature
temp <- fread("../data/temperature/temperature_daily_zipcode_combined.csv", data.table = T,
key = c("ZIP", "date"))
temp[ , c("pr", "year") := NULL]
temp[ , date := ymd(date)]
temp <- temp[date >= make_date(year = 2000, month = 1, day = 1) - buffer &
date <= make_date(year = 2014, month = 12, day = 31) + buffer]
dim(temp)
for (year_ in 2000:2014) {
# subset to particular year
# (need to keep buffer of one week + 3 days on either end due to lag and control days)
temp_year <- temp[date >= make_date(year = year_, month = 1, day = 1) - buffer &
date <= make_date(year = year_, month = 12, day = 31) + buffer]
# sort by zip/date
temp_year <- temp_year[order(ZIP, date)]
# compute lags 1, 2, 3 for temp
temp_year[ , c("tmmx_lag1", "tmmx_lag2", "tmmx_lag3") := shift(tmmx, n = 1:3, type = "lag"),
by = ZIP]
# compute lags 1, 2 for humidity
temp_year[ , c("rmax_lag1", "rmax_lag2") := shift(rmax, n = 1:2, type = "lag"),
by = ZIP]
# exclude extra lag days
temp_year <- temp_year[date >= make_date(year = year_, month = 1, day = 1) - control_dist &
date >= make_date(year = year_, month = 12, day = 31) + control_dist]
# write to file
write_fst(temp_year, path = paste0("../data/enviro/temp_", year_, ".fst"))
# remove subsetted data.table for memory purposes
rm(temp_year)
print(year_)
}
year_ <- 2000
temp_year <- temp[date >= make_date(year = year_, month = 1, day = 1) - buffer &
date <= make_date(year = year_, month = 12, day = 31) + buffer]
# sort by zip/date
temp_year <- temp_year[order(ZIP, date)]
# compute lags 1, 2, 3 for temp
temp_year[ , c("tmmx_lag1", "tmmx_lag2", "tmmx_lag3") := shift(tmmx, n = 1:3, type = "lag"),
by = ZIP]
# compute lags 1, 2 for humidity
temp_year[ , c("rmax_lag1", "rmax_lag2") := shift(rmax, n = 1:2, type = "lag"),
by = ZIP]
dim(temp_year)
# exclude extra lag days
temp_year <- temp_year[date >= make_date(year = year_, month = 1, day = 1) - control_dist &
date <= make_date(year = year_, month = 12, day = 31) + control_dist]
dim(temp_year)
for (year_ in 2000:2014) {
# subset to particular year
# (need to keep buffer of one week + 3 days on either end due to lag and control days)
temp_year <- temp[date >= make_date(year = year_, month = 1, day = 1) - buffer &
date <= make_date(year = year_, month = 12, day = 31) + buffer]
# sort by zip/date
temp_year <- temp_year[order(ZIP, date)]
# compute lags 1, 2, 3 for temp
temp_year[ , c("tmmx_lag1", "tmmx_lag2", "tmmx_lag3") := shift(tmmx, n = 1:3, type = "lag"),
by = ZIP]
# compute lags 1, 2 for humidity
temp_year[ , c("rmax_lag1", "rmax_lag2") := shift(rmax, n = 1:2, type = "lag"),
by = ZIP]
# exclude extra lag days
temp_year <- temp_year[date >= make_date(year = year_, month = 1, day = 1) - control_dist &
date <= make_date(year = year_, month = 12, day = 31) + control_dist]
# write to file
write_fst(temp_year, path = paste0("../data/enviro/temp_", year_, ".fst"))
# remove subsetted data.table for memory purposes
rm(temp_year)
print(year_)
}
rm(temp)
rm(list= ls())
library(NSAPHutils)
set_threads()
# Make sure working directory is set to moretrees2/code
setwd("/nfs/home/E/ethomas/shared_space/ci3_analysis/moretrees2/code/")
library(data.table)
library(fst)
library(icd)
library(stringr)
library(readr)
admissions_path <- "../data/admissions_cvd/"
enviro_path <- "../data/temperature/"
merged_path <- "../data/merged_admissions_enviro/"
year_ <- 2000
admissions <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
as.data.table = T, columns = c("zip", "adate", "ccs"))
# select control days (randomly exactly one week before or after)
# NOTE: could later swap this to "time-stratified" design
admissions$cdate <- admissions$adate + sample(c(-7, 7), nrow(admissions), replace = T)
# read in PM2.5 data
pm25 <- read_fst(paste0("../data/enviro/pm_", year_, ".fst"),
as.data.table = T, columns = c("ZIP", "date", "pm25", "pm25_lag1"))
names(pm25)
# compute lag01 PM2.5
pm25[ , pm25_lag01_case := (pm25 + pm25_lag1) / 2]
pm25[ , c("pm25","pm25_lag1") := NULL]
names(pm25)
dim(admissions)
admissions <- merge(admissions, pm25, by.x = c("zip", "adate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
names(admissions)
setnames(pm25, "pm25_lag01_case", "pm25_lag01_control")
admissions <- merge(admissions, pm25, by.x = c("zip", "cdate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
names(admissions)
sum(is.na(admissions$pm25_lag01_case))
sum(is.na(admissions$pm25_lag01_control))
year_ <- 2010
rm(pm25)
rm(admissions)
pm25 <- read_fst(paste0("../data/enviro/pm_", year_, ".fst"),
as.data.table = T, columns = c("ZIP", "date", "pm25", "pm25_lag1"))
# compute lag01 PM2.5
pm25[ , pm25_lag01_case := (pm25 + pm25_lag1) / 2]
pm25[ , c("pm25","pm25_lag1") := NULL]
# merge lag01 PM2.5 for case and control days
admissions <- merge(admissions, pm25, by.x = c("zip", "adate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
admissions <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
as.data.table = T, columns = c("zip", "adate", "ccs"))
# select control days (randomly exactly one week before or after)
# NOTE: could later swap this to "time-stratified" design
admissions$cdate <- admissions$adate + sample(c(-7, 7), nrow(admissions), replace = T)
# read in PM2.5 data
pm25 <- read_fst(paste0("../data/enviro/pm_", year_, ".fst"),
as.data.table = T, columns = c("ZIP", "date", "pm25", "pm25_lag1"))
# compute lag01 PM2.5
pm25[ , pm25_lag01_case := (pm25 + pm25_lag1) / 2]
pm25[ , c("pm25","pm25_lag1") := NULL]
# merge lag01 PM2.5 for case and control days
admissions <- merge(admissions, pm25, by.x = c("zip", "adate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
setnames(pm25, "pm25_lag01_case", "pm25_lag01_control")
admissions <- merge(admissions, pm25, by.x = c("zip", "cdate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
setnames(pm25, "pm25_lag01_case", "pm25_lag01_control")
admissions <- merge(admissions, pm25, by.x = c("zip", "cdate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
admissions <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
as.data.table = T, columns = c("zip", "adate", "ccs"))
# select control days (randomly exactly one week before or after)
# NOTE: could later swap this to "time-stratified" design
admissions$cdate <- admissions$adate + sample(c(-7, 7), nrow(admissions), replace = T)
# read in PM2.5 data
pm25 <- read_fst(paste0("../data/enviro/pm_", year_, ".fst"),
as.data.table = T, columns = c("ZIP", "date", "pm25", "pm25_lag1"))
# compute lag01 PM2.5
pm25[ , pm25_lag01_case := (pm25 + pm25_lag1) / 2]
pm25[ , c("pm25","pm25_lag1") := NULL]
# merge lag01 PM2.5 for case and control days
admissions <- merge(admissions, pm25, by.x = c("zip", "adate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
setnames(pm25, "pm25_lag01_case", "pm25_lag01_control")
admissions <- merge(admissions, pm25, by.x = c("zip", "cdate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
names(admissions)
sum(is.na(admissions$pm25_lag01_case))
sum(is.na(admissions$pm25_lag01_control))
# read in temperature & humidity data
temp <- read_fst(paste0("../data/enviro/temp_", year_, ".fst"), as.data.table = T,
columns = c("ZIP", "date", "tmmx", "tmmx_lag1", "rmax", "rmax_lag1"))
# Remove PM2.5 data
rm(pm25)
temp[ , tmmx_lag01_case := (tmmx + tmmx_lag1) / 2]
temp[ , rmax_lag01_case := (rmax + rmax_lag1) / 2]
temp[ , c("tmmx", "tmmx_lag1", "rmax", "rmax_lag1") := NULL]
# merge temp & humidity data for case and control days
admissions <- merge(admissions, temp, by.x = c("zip", "adate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
setnames(temp, c("tmmx_lag01_case", "rmax_lag01_case"),
c("tmmx_lag01_control", "rmax_lag01_control"))
admissions <- merge(admissions, temp, by.x = c("zip", "cdate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
sum(is.na(admissions$tmmx_lag01_case))
sum(is.na(admissions$tmmx_lag01_control))
sum(is.na(admissions$rmax_lag01_control))
sum(is.na(admissions$rmax_lag01_case))
admissions_all <- NULL
dim(admissions)
admissions_all <- rbind(admissions_all, admissions)
dim(admissions_all)
rm(list= ls())
library(NSAPHutils)
set_threads()
# Make sure working directory is set to moretrees2/code
setwd("/nfs/home/E/ethomas/shared_space/ci3_analysis/moretrees2/code/")
library(data.table)
library(fst)
library(icd)
library(stringr)
library(readr)
admissions_path <- "../data/admissions_cvd/"
enviro_path <- "../data/temperature/"
merged_path <- "../data/merged_admissions_enviro/"
# set seed because we will randomly select control day
set.seed(6357312)
admissions_all <- NULL
for (year_ in 2000:2014) {
# read in admissions
# NOTE: for now I am ignoring the fact that multiple hospitalizations may occur for same individual
admissions <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
as.data.table = T, columns = c("zip", "adate", "ccs"))
# select control days (randomly exactly one week before or after)
# NOTE: could later swap this to "time-stratified" design
admissions$cdate <- admissions$adate + sample(c(-7, 7), nrow(admissions), replace = T)
# read in PM2.5 data
pm25 <- read_fst(paste0("../data/enviro/pm_", year_, ".fst"),
as.data.table = T, columns = c("ZIP", "date", "pm25", "pm25_lag1"))
# compute lag01 PM2.5
pm25[ , pm25_lag01_case := (pm25 + pm25_lag1) / 2]
pm25[ , c("pm25","pm25_lag1") := NULL]
# merge lag01 PM2.5 for case and control days
admissions <- merge(admissions, pm25, by.x = c("zip", "adate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
setnames(pm25, "pm25_lag01_case", "pm25_lag01_control")
admissions <- merge(admissions, pm25, by.x = c("zip", "cdate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
# Remove PM2.5 data
rm(pm25)
# read in temperature & humidity data
temp <- read_fst(paste0("../data/enviro/temp_", year_, ".fst"), as.data.table = T,
columns = c("ZIP", "date", "tmmx", "tmmx_lag1", "rmax", "rmax_lag1"))
# compute lag01 temperature & humidity
temp[ , tmmx_lag01_case := (tmmx + tmmx_lag1) / 2]
temp[ , rmax_lag01_case := (rmax + rmax_lag1) / 2]
temp[ , c("tmmx", "tmmx_lag1", "rmax", "rmax_lag1") := NULL]
# merge temp & humidity data for case and control days
admissions <- merge(admissions, temp, by.x = c("zip", "adate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
setnames(temp, c("tmmx_lag01_case", "rmax_lag01_case"),
c("tmmx_lag01_control", "rmax_lag01_control"))
admissions <- merge(admissions, temp, by.x = c("zip", "cdate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
# Remove temp data
rm(temp)
# concatenate with other year's data
admissions_all <- rbind(admissions_all, admissions)
print(year_)
}
names(admissions)
admissions[ , c("adate", "cdate", "zip") := NULL]
dim(admissions)
names(admissions)
rm(list = ls())
library(NSAPHutils)
set_threads()
# Make sure working directory is set to moretrees2/code
setwd("/nfs/home/E/ethomas/shared_space/ci3_analysis/moretrees2/code/")
library(data.table)
library(fst)
library(icd)
library(stringr)
library(readr)
admissions_path <- "../data/admissions_cvd/"
enviro_path <- "../data/temperature/"
merged_path <- "../data/merged_admissions_enviro/"
# set seed because we will randomly select control day
set.seed(6357312)
admissions_all <- NULL
for (year_ in 2000:2014) {
# read in admissions
# NOTE: for now I am ignoring the fact that multiple hospitalizations may occur for same individual
admissions <- read_fst(paste0("../data/admissions_cvd/admissions_cvd_", year_, ".fst"),
as.data.table = T, columns = c("zip", "adate", "ccs"))
# select control days (randomly exactly one week before or after)
# NOTE: could later swap this to "time-stratified" design
admissions$cdate <- admissions$adate + sample(c(-7, 7), nrow(admissions), replace = T)
# read in PM2.5 data
pm25 <- read_fst(paste0("../data/enviro/pm_", year_, ".fst"),
as.data.table = T, columns = c("ZIP", "date", "pm25", "pm25_lag1"))
# compute lag01 PM2.5
pm25[ , pm25_lag01_case := (pm25 + pm25_lag1) / 2]
pm25[ , c("pm25","pm25_lag1") := NULL]
# merge lag01 PM2.5 for case and control days
admissions <- merge(admissions, pm25, by.x = c("zip", "adate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
setnames(pm25, "pm25_lag01_case", "pm25_lag01_control")
admissions <- merge(admissions, pm25, by.x = c("zip", "cdate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
# Remove PM2.5 data
rm(pm25)
# read in temperature & humidity data
temp <- read_fst(paste0("../data/enviro/temp_", year_, ".fst"), as.data.table = T,
columns = c("ZIP", "date", "tmmx", "tmmx_lag1", "rmax", "rmax_lag1"))
# compute lag01 temperature & humidity
temp[ , tmmx_lag01_case := (tmmx + tmmx_lag1) / 2]
temp[ , rmax_lag01_case := (rmax + rmax_lag1) / 2]
temp[ , c("tmmx", "tmmx_lag1", "rmax", "rmax_lag1") := NULL]
# merge temp & humidity data for case and control days
admissions <- merge(admissions, temp, by.x = c("zip", "adate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
setnames(temp, c("tmmx_lag01_case", "rmax_lag01_case"),
c("tmmx_lag01_control", "rmax_lag01_control"))
admissions <- merge(admissions, temp, by.x = c("zip", "cdate"), by.y = c("ZIP", "date"),
all.x = T, all.y = F)
# Remove temp data
rm(temp)
# Drop unnecessary variables
admissions[ , c("adate", "cdate", "zip") := NULL]
# concatenate with other year's data
admissions_all <- rbind(admissions_all, admissions)
print(year_)
}
# write to file
write_fst(admissions, "../data/merged_admissions_enviro/admissions_enviro.fst")
write_fst(admissions_all, "../data/merged_admissions_enviro/admissions_enviro.fst")
dim(admissions_all)
names(admissions_all)
admissions_all[ , .(count = .N), by = ccs]
